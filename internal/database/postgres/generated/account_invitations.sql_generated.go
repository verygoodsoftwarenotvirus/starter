// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account_invitations.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const attachAccountInvitationsToUserID = `-- name: AttachAccountInvitationsToUserID :exec

UPDATE account_invitations SET
	to_user = $1,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND to_email = LOWER($2)
`

type AttachAccountInvitationsToUserIDParams struct {
	ToEmail string
	ToUser  sql.NullString
}

func (q *Queries) AttachAccountInvitationsToUserID(ctx context.Context, db DBTX, arg *AttachAccountInvitationsToUserIDParams) error {
	_, err := db.ExecContext(ctx, attachAccountInvitationsToUserID, arg.ToUser, arg.ToEmail)
	return err
}

const checkAccountInvitationExistence = `-- name: CheckAccountInvitationExistence :one

SELECT EXISTS (
	SELECT account_invitations.id
	FROM account_invitations
	WHERE account_invitations.archived_at IS NULL
	AND account_invitations.id = $1
)
`

func (q *Queries) CheckAccountInvitationExistence(ctx context.Context, db DBTX, id string) (bool, error) {
	row := db.QueryRowContext(ctx, checkAccountInvitationExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAccountInvitation = `-- name: CreateAccountInvitation :exec

INSERT INTO account_invitations (
	id,
	from_user,
	to_user,
	to_name,
	note,
	to_email,
	token,
	destination_account,
	expires_at
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8,
	$9
)
`

type CreateAccountInvitationParams struct {
	ExpiresAt          time.Time
	ID                 string
	FromUser           string
	ToName             string
	Note               string
	ToEmail            string
	Token              string
	DestinationAccount string
	ToUser             sql.NullString
}

func (q *Queries) CreateAccountInvitation(ctx context.Context, db DBTX, arg *CreateAccountInvitationParams) error {
	_, err := db.ExecContext(ctx, createAccountInvitation,
		arg.ID,
		arg.FromUser,
		arg.ToUser,
		arg.ToName,
		arg.Note,
		arg.ToEmail,
		arg.Token,
		arg.DestinationAccount,
		arg.ExpiresAt,
	)
	return err
}

const getAccountInvitationByAccountAndID = `-- name: GetAccountInvitationByAccountAndID :one

SELECT
	account_invitations.id,
	accounts.id as account_id,
	accounts.name as account_name,
	accounts.billing_status as account_billing_status,
	accounts.contact_phone as account_contact_phone,
	accounts.payment_processor_customer_id as account_payment_processor_customer_id,
	accounts.subscription_plan_id as account_subscription_plan_id,
	accounts.belongs_to_user as account_belongs_to_user,
	accounts.time_zone as account_time_zone,
	accounts.address_line_1 as account_address_line_1,
	accounts.address_line_2 as account_address_line_2,
	accounts.city as account_city,
	accounts.state as account_state,
	accounts.zip_code as account_zip_code,
	accounts.country as account_country,
	accounts.latitude as account_latitude,
	accounts.longitude as account_longitude,
	accounts.last_payment_provider_sync_occurred_at as account_last_payment_provider_sync_occurred_at,
	accounts.webhook_hmac_secret as account_webhook_hmac_secret,
	accounts.created_at as account_created_at,
	accounts.last_updated_at as account_last_updated_at,
	accounts.archived_at as account_archived_at,
	account_invitations.from_user,
	account_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	account_invitations.to_name,
	account_invitations.note,
	account_invitations.to_email,
	account_invitations.token,
	account_invitations.destination_account,
	account_invitations.expires_at,
	account_invitations.status,
	account_invitations.status_note,
	account_invitations.created_at,
	account_invitations.last_updated_at,
	account_invitations.archived_at
FROM account_invitations
	JOIN accounts ON account_invitations.destination_account = accounts.id
	JOIN users ON account_invitations.from_user = users.id
WHERE account_invitations.archived_at IS NULL
	AND account_invitations.expires_at > NOW()
	AND account_invitations.destination_account = $1
	AND account_invitations.id = $2
`

type GetAccountInvitationByAccountAndIDParams struct {
	DestinationAccount string
	ID                 string
}

type GetAccountInvitationByAccountAndIDRow struct {
	ExpiresAt                                time.Time
	AccountCreatedAt                         time.Time
	UserCreatedAt                            time.Time
	CreatedAt                                time.Time
	UserLastIndexedAt                        sql.NullTime
	UserEmailAddressVerifiedAt               sql.NullTime
	UserLastUpdatedAt                        sql.NullTime
	LastUpdatedAt                            sql.NullTime
	ArchivedAt                               sql.NullTime
	UserLastAcceptedPrivacyPolicy            sql.NullTime
	UserLastAcceptedTermsOfService           sql.NullTime
	UserArchivedAt                           sql.NullTime
	UserBirthday                             sql.NullTime
	UserTwoFactorSecretVerifiedAt            sql.NullTime
	UserPasswordLastChangedAt                sql.NullTime
	AccountArchivedAt                        sql.NullTime
	AccountLastUpdatedAt                     sql.NullTime
	AccountLastPaymentProviderSyncOccurredAt sql.NullTime
	AccountCountry                           string
	AccountPaymentProcessorCustomerID        string
	AccountID                                string
	AccountName                              string
	FromUser                                 string
	AccountBillingStatus                     string
	UserID                                   string
	UserUsername                             string
	StatusNote                               string
	UserEmailAddress                         string
	UserHashedPassword                       string
	ID                                       string
	Status                                   InvitationState
	UserTwoFactorSecret                      string
	AccountZipCode                           string
	UserServiceRole                          string
	UserUserAccountStatus                    string
	UserUserAccountStatusExplanation         string
	AccountState                             string
	AccountContactPhone                      string
	AccountCity                              string
	UserFirstName                            string
	UserLastName                             string
	AccountAddressLine2                      string
	AccountAddressLine1                      string
	AccountTimeZone                          TimeZone
	AccountBelongsToUser                     string
	DestinationAccount                       string
	AccountWebhookHmacSecret                 string
	ToName                                   string
	Note                                     string
	ToEmail                                  string
	Token                                    string
	AccountSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken        sql.NullString
	UserAvatarSrc                            sql.NullString
	ToUser                                   sql.NullString
	AccountLatitude                          sql.NullString
	AccountLongitude                         sql.NullString
	UserRequiresPasswordChange               bool
}

func (q *Queries) GetAccountInvitationByAccountAndID(ctx context.Context, db DBTX, arg *GetAccountInvitationByAccountAndIDParams) (*GetAccountInvitationByAccountAndIDRow, error) {
	row := db.QueryRowContext(ctx, getAccountInvitationByAccountAndID, arg.DestinationAccount, arg.ID)
	var i GetAccountInvitationByAccountAndIDRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountName,
		&i.AccountBillingStatus,
		&i.AccountContactPhone,
		&i.AccountPaymentProcessorCustomerID,
		&i.AccountSubscriptionPlanID,
		&i.AccountBelongsToUser,
		&i.AccountTimeZone,
		&i.AccountAddressLine1,
		&i.AccountAddressLine2,
		&i.AccountCity,
		&i.AccountState,
		&i.AccountZipCode,
		&i.AccountCountry,
		&i.AccountLatitude,
		&i.AccountLongitude,
		&i.AccountLastPaymentProviderSyncOccurredAt,
		&i.AccountWebhookHmacSecret,
		&i.AccountCreatedAt,
		&i.AccountLastUpdatedAt,
		&i.AccountArchivedAt,
		&i.FromUser,
		&i.ToUser,
		&i.UserID,
		&i.UserUsername,
		&i.UserAvatarSrc,
		&i.UserEmailAddress,
		&i.UserHashedPassword,
		&i.UserPasswordLastChangedAt,
		&i.UserRequiresPasswordChange,
		&i.UserTwoFactorSecret,
		&i.UserTwoFactorSecretVerifiedAt,
		&i.UserServiceRole,
		&i.UserUserAccountStatus,
		&i.UserUserAccountStatusExplanation,
		&i.UserBirthday,
		&i.UserEmailAddressVerificationToken,
		&i.UserEmailAddressVerifiedAt,
		&i.UserFirstName,
		&i.UserLastName,
		&i.UserLastAcceptedTermsOfService,
		&i.UserLastAcceptedPrivacyPolicy,
		&i.UserLastIndexedAt,
		&i.UserCreatedAt,
		&i.UserLastUpdatedAt,
		&i.UserArchivedAt,
		&i.ToName,
		&i.Note,
		&i.ToEmail,
		&i.Token,
		&i.DestinationAccount,
		&i.ExpiresAt,
		&i.Status,
		&i.StatusNote,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getAccountInvitationByEmailAndToken = `-- name: GetAccountInvitationByEmailAndToken :one

SELECT
	account_invitations.id,
	accounts.id as account_id,
	accounts.name as account_name,
	accounts.billing_status as account_billing_status,
	accounts.contact_phone as account_contact_phone,
	accounts.payment_processor_customer_id as account_payment_processor_customer_id,
	accounts.subscription_plan_id as account_subscription_plan_id,
	accounts.belongs_to_user as account_belongs_to_user,
	accounts.time_zone as account_time_zone,
	accounts.address_line_1 as account_address_line_1,
	accounts.address_line_2 as account_address_line_2,
	accounts.city as account_city,
	accounts.state as account_state,
	accounts.zip_code as account_zip_code,
	accounts.country as account_country,
	accounts.latitude as account_latitude,
	accounts.longitude as account_longitude,
	accounts.last_payment_provider_sync_occurred_at as account_last_payment_provider_sync_occurred_at,
	accounts.webhook_hmac_secret as account_webhook_hmac_secret,
	accounts.created_at as account_created_at,
	accounts.last_updated_at as account_last_updated_at,
	accounts.archived_at as account_archived_at,
	account_invitations.from_user,
	account_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	account_invitations.to_name,
	account_invitations.note,
	account_invitations.to_email,
	account_invitations.token,
	account_invitations.destination_account,
	account_invitations.expires_at,
	account_invitations.status,
	account_invitations.status_note,
	account_invitations.created_at,
	account_invitations.last_updated_at,
	account_invitations.archived_at
FROM account_invitations
	JOIN accounts ON account_invitations.destination_account = accounts.id
	JOIN users ON account_invitations.from_user = users.id
WHERE account_invitations.archived_at IS NULL
	AND account_invitations.expires_at > NOW()
	AND account_invitations.to_email = LOWER($1)
	AND account_invitations.token = $2
`

type GetAccountInvitationByEmailAndTokenParams struct {
	ToEmail string
	Token   string
}

type GetAccountInvitationByEmailAndTokenRow struct {
	ExpiresAt                                time.Time
	AccountCreatedAt                         time.Time
	UserCreatedAt                            time.Time
	CreatedAt                                time.Time
	UserLastIndexedAt                        sql.NullTime
	UserEmailAddressVerifiedAt               sql.NullTime
	UserLastUpdatedAt                        sql.NullTime
	LastUpdatedAt                            sql.NullTime
	ArchivedAt                               sql.NullTime
	UserLastAcceptedPrivacyPolicy            sql.NullTime
	UserLastAcceptedTermsOfService           sql.NullTime
	UserArchivedAt                           sql.NullTime
	UserBirthday                             sql.NullTime
	UserTwoFactorSecretVerifiedAt            sql.NullTime
	UserPasswordLastChangedAt                sql.NullTime
	AccountArchivedAt                        sql.NullTime
	AccountLastUpdatedAt                     sql.NullTime
	AccountLastPaymentProviderSyncOccurredAt sql.NullTime
	AccountCountry                           string
	AccountPaymentProcessorCustomerID        string
	AccountID                                string
	AccountName                              string
	FromUser                                 string
	AccountBillingStatus                     string
	UserID                                   string
	UserUsername                             string
	StatusNote                               string
	UserEmailAddress                         string
	UserHashedPassword                       string
	ID                                       string
	Status                                   InvitationState
	UserTwoFactorSecret                      string
	AccountZipCode                           string
	UserServiceRole                          string
	UserUserAccountStatus                    string
	UserUserAccountStatusExplanation         string
	AccountState                             string
	AccountContactPhone                      string
	AccountCity                              string
	UserFirstName                            string
	UserLastName                             string
	AccountAddressLine2                      string
	AccountAddressLine1                      string
	AccountTimeZone                          TimeZone
	AccountBelongsToUser                     string
	DestinationAccount                       string
	AccountWebhookHmacSecret                 string
	ToName                                   string
	Note                                     string
	ToEmail                                  string
	Token                                    string
	AccountSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken        sql.NullString
	UserAvatarSrc                            sql.NullString
	ToUser                                   sql.NullString
	AccountLatitude                          sql.NullString
	AccountLongitude                         sql.NullString
	UserRequiresPasswordChange               bool
}

func (q *Queries) GetAccountInvitationByEmailAndToken(ctx context.Context, db DBTX, arg *GetAccountInvitationByEmailAndTokenParams) (*GetAccountInvitationByEmailAndTokenRow, error) {
	row := db.QueryRowContext(ctx, getAccountInvitationByEmailAndToken, arg.ToEmail, arg.Token)
	var i GetAccountInvitationByEmailAndTokenRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountName,
		&i.AccountBillingStatus,
		&i.AccountContactPhone,
		&i.AccountPaymentProcessorCustomerID,
		&i.AccountSubscriptionPlanID,
		&i.AccountBelongsToUser,
		&i.AccountTimeZone,
		&i.AccountAddressLine1,
		&i.AccountAddressLine2,
		&i.AccountCity,
		&i.AccountState,
		&i.AccountZipCode,
		&i.AccountCountry,
		&i.AccountLatitude,
		&i.AccountLongitude,
		&i.AccountLastPaymentProviderSyncOccurredAt,
		&i.AccountWebhookHmacSecret,
		&i.AccountCreatedAt,
		&i.AccountLastUpdatedAt,
		&i.AccountArchivedAt,
		&i.FromUser,
		&i.ToUser,
		&i.UserID,
		&i.UserUsername,
		&i.UserAvatarSrc,
		&i.UserEmailAddress,
		&i.UserHashedPassword,
		&i.UserPasswordLastChangedAt,
		&i.UserRequiresPasswordChange,
		&i.UserTwoFactorSecret,
		&i.UserTwoFactorSecretVerifiedAt,
		&i.UserServiceRole,
		&i.UserUserAccountStatus,
		&i.UserUserAccountStatusExplanation,
		&i.UserBirthday,
		&i.UserEmailAddressVerificationToken,
		&i.UserEmailAddressVerifiedAt,
		&i.UserFirstName,
		&i.UserLastName,
		&i.UserLastAcceptedTermsOfService,
		&i.UserLastAcceptedPrivacyPolicy,
		&i.UserLastIndexedAt,
		&i.UserCreatedAt,
		&i.UserLastUpdatedAt,
		&i.UserArchivedAt,
		&i.ToName,
		&i.Note,
		&i.ToEmail,
		&i.Token,
		&i.DestinationAccount,
		&i.ExpiresAt,
		&i.Status,
		&i.StatusNote,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getAccountInvitationByTokenAndID = `-- name: GetAccountInvitationByTokenAndID :one

SELECT
	account_invitations.id,
	accounts.id as account_id,
	accounts.name as account_name,
	accounts.billing_status as account_billing_status,
	accounts.contact_phone as account_contact_phone,
	accounts.payment_processor_customer_id as account_payment_processor_customer_id,
	accounts.subscription_plan_id as account_subscription_plan_id,
	accounts.belongs_to_user as account_belongs_to_user,
	accounts.time_zone as account_time_zone,
	accounts.address_line_1 as account_address_line_1,
	accounts.address_line_2 as account_address_line_2,
	accounts.city as account_city,
	accounts.state as account_state,
	accounts.zip_code as account_zip_code,
	accounts.country as account_country,
	accounts.latitude as account_latitude,
	accounts.longitude as account_longitude,
	accounts.last_payment_provider_sync_occurred_at as account_last_payment_provider_sync_occurred_at,
	accounts.webhook_hmac_secret as account_webhook_hmac_secret,
	accounts.created_at as account_created_at,
	accounts.last_updated_at as account_last_updated_at,
	accounts.archived_at as account_archived_at,
	account_invitations.from_user,
	account_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	account_invitations.to_name,
	account_invitations.note,
	account_invitations.to_email,
	account_invitations.token,
	account_invitations.destination_account,
	account_invitations.expires_at,
	account_invitations.status,
	account_invitations.status_note,
	account_invitations.created_at,
	account_invitations.last_updated_at,
	account_invitations.archived_at
FROM account_invitations
	JOIN accounts ON account_invitations.destination_account = accounts.id
	JOIN users ON account_invitations.from_user = users.id
WHERE account_invitations.archived_at IS NULL
	AND account_invitations.expires_at > NOW()
	AND account_invitations.token = $1
	AND account_invitations.id = $2
`

type GetAccountInvitationByTokenAndIDParams struct {
	Token string
	ID    string
}

type GetAccountInvitationByTokenAndIDRow struct {
	ExpiresAt                                time.Time
	AccountCreatedAt                         time.Time
	UserCreatedAt                            time.Time
	CreatedAt                                time.Time
	UserLastIndexedAt                        sql.NullTime
	UserEmailAddressVerifiedAt               sql.NullTime
	UserLastUpdatedAt                        sql.NullTime
	LastUpdatedAt                            sql.NullTime
	ArchivedAt                               sql.NullTime
	UserLastAcceptedPrivacyPolicy            sql.NullTime
	UserLastAcceptedTermsOfService           sql.NullTime
	UserArchivedAt                           sql.NullTime
	UserBirthday                             sql.NullTime
	UserTwoFactorSecretVerifiedAt            sql.NullTime
	UserPasswordLastChangedAt                sql.NullTime
	AccountArchivedAt                        sql.NullTime
	AccountLastUpdatedAt                     sql.NullTime
	AccountLastPaymentProviderSyncOccurredAt sql.NullTime
	AccountCountry                           string
	AccountPaymentProcessorCustomerID        string
	AccountID                                string
	AccountName                              string
	FromUser                                 string
	AccountBillingStatus                     string
	UserID                                   string
	UserUsername                             string
	StatusNote                               string
	UserEmailAddress                         string
	UserHashedPassword                       string
	ID                                       string
	Status                                   InvitationState
	UserTwoFactorSecret                      string
	AccountZipCode                           string
	UserServiceRole                          string
	UserUserAccountStatus                    string
	UserUserAccountStatusExplanation         string
	AccountState                             string
	AccountContactPhone                      string
	AccountCity                              string
	UserFirstName                            string
	UserLastName                             string
	AccountAddressLine2                      string
	AccountAddressLine1                      string
	AccountTimeZone                          TimeZone
	AccountBelongsToUser                     string
	DestinationAccount                       string
	AccountWebhookHmacSecret                 string
	ToName                                   string
	Note                                     string
	ToEmail                                  string
	Token                                    string
	AccountSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken        sql.NullString
	UserAvatarSrc                            sql.NullString
	ToUser                                   sql.NullString
	AccountLatitude                          sql.NullString
	AccountLongitude                         sql.NullString
	UserRequiresPasswordChange               bool
}

func (q *Queries) GetAccountInvitationByTokenAndID(ctx context.Context, db DBTX, arg *GetAccountInvitationByTokenAndIDParams) (*GetAccountInvitationByTokenAndIDRow, error) {
	row := db.QueryRowContext(ctx, getAccountInvitationByTokenAndID, arg.Token, arg.ID)
	var i GetAccountInvitationByTokenAndIDRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AccountName,
		&i.AccountBillingStatus,
		&i.AccountContactPhone,
		&i.AccountPaymentProcessorCustomerID,
		&i.AccountSubscriptionPlanID,
		&i.AccountBelongsToUser,
		&i.AccountTimeZone,
		&i.AccountAddressLine1,
		&i.AccountAddressLine2,
		&i.AccountCity,
		&i.AccountState,
		&i.AccountZipCode,
		&i.AccountCountry,
		&i.AccountLatitude,
		&i.AccountLongitude,
		&i.AccountLastPaymentProviderSyncOccurredAt,
		&i.AccountWebhookHmacSecret,
		&i.AccountCreatedAt,
		&i.AccountLastUpdatedAt,
		&i.AccountArchivedAt,
		&i.FromUser,
		&i.ToUser,
		&i.UserID,
		&i.UserUsername,
		&i.UserAvatarSrc,
		&i.UserEmailAddress,
		&i.UserHashedPassword,
		&i.UserPasswordLastChangedAt,
		&i.UserRequiresPasswordChange,
		&i.UserTwoFactorSecret,
		&i.UserTwoFactorSecretVerifiedAt,
		&i.UserServiceRole,
		&i.UserUserAccountStatus,
		&i.UserUserAccountStatusExplanation,
		&i.UserBirthday,
		&i.UserEmailAddressVerificationToken,
		&i.UserEmailAddressVerifiedAt,
		&i.UserFirstName,
		&i.UserLastName,
		&i.UserLastAcceptedTermsOfService,
		&i.UserLastAcceptedPrivacyPolicy,
		&i.UserLastIndexedAt,
		&i.UserCreatedAt,
		&i.UserLastUpdatedAt,
		&i.UserArchivedAt,
		&i.ToName,
		&i.Note,
		&i.ToEmail,
		&i.Token,
		&i.DestinationAccount,
		&i.ExpiresAt,
		&i.Status,
		&i.StatusNote,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getPendingInvitesForUser = `-- name: GetPendingInvitesForUser :many

SELECT
	account_invitations.id,
	accounts.id as account_id,
	accounts.name as account_name,
	accounts.billing_status as account_billing_status,
	accounts.contact_phone as account_contact_phone,
	accounts.payment_processor_customer_id as account_payment_processor_customer_id,
	accounts.subscription_plan_id as account_subscription_plan_id,
	accounts.belongs_to_user as account_belongs_to_user,
	accounts.time_zone as account_time_zone,
	accounts.address_line_1 as account_address_line_1,
	accounts.address_line_2 as account_address_line_2,
	accounts.city as account_city,
	accounts.state as account_state,
	accounts.zip_code as account_zip_code,
	accounts.country as account_country,
	accounts.latitude as account_latitude,
	accounts.longitude as account_longitude,
	accounts.last_payment_provider_sync_occurred_at as account_last_payment_provider_sync_occurred_at,
	accounts.webhook_hmac_secret as account_webhook_hmac_secret,
	accounts.created_at as account_created_at,
	accounts.last_updated_at as account_last_updated_at,
	accounts.archived_at as account_archived_at,
	account_invitations.from_user,
	account_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	account_invitations.to_name,
	account_invitations.note,
	account_invitations.to_email,
	account_invitations.token,
	account_invitations.destination_account,
	account_invitations.expires_at,
	account_invitations.status,
	account_invitations.status_note,
	account_invitations.created_at,
	account_invitations.last_updated_at,
	account_invitations.archived_at,
	(
		SELECT COUNT(account_invitations.id)
		FROM account_invitations
		WHERE account_invitations.archived_at IS NULL
			AND account_invitations.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND account_invitations.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				account_invitations.last_updated_at IS NULL
				OR account_invitations.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				account_invitations.last_updated_at IS NULL
				OR account_invitations.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(account_invitations.id)
		FROM account_invitations
		WHERE account_invitations.archived_at IS NULL
	) AS total_count
FROM account_invitations
	JOIN accounts ON account_invitations.destination_account = accounts.id
	JOIN users ON account_invitations.from_user = users.id
WHERE account_invitations.archived_at IS NULL
	AND account_invitations.to_user = $5
	AND account_invitations.status = $6
	AND account_invitations.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND account_invitations.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		account_invitations.last_updated_at IS NULL
		OR account_invitations.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		account_invitations.last_updated_at IS NULL
		OR account_invitations.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $8
OFFSET $7
`

type GetPendingInvitesForUserParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	Status        InvitationState
	ToUser        sql.NullString
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetPendingInvitesForUserRow struct {
	ExpiresAt                                time.Time
	AccountCreatedAt                         time.Time
	UserCreatedAt                            time.Time
	CreatedAt                                time.Time
	UserLastIndexedAt                        sql.NullTime
	UserEmailAddressVerifiedAt               sql.NullTime
	UserLastUpdatedAt                        sql.NullTime
	LastUpdatedAt                            sql.NullTime
	ArchivedAt                               sql.NullTime
	UserLastAcceptedPrivacyPolicy            sql.NullTime
	UserLastAcceptedTermsOfService           sql.NullTime
	UserArchivedAt                           sql.NullTime
	UserBirthday                             sql.NullTime
	UserTwoFactorSecretVerifiedAt            sql.NullTime
	UserPasswordLastChangedAt                sql.NullTime
	AccountArchivedAt                        sql.NullTime
	AccountLastUpdatedAt                     sql.NullTime
	AccountLastPaymentProviderSyncOccurredAt sql.NullTime
	UserTwoFactorSecret                      string
	UserFirstName                            string
	AccountID                                string
	AccountName                              string
	FromUser                                 string
	AccountBillingStatus                     string
	UserID                                   string
	UserUsername                             string
	StatusNote                               string
	UserEmailAddress                         string
	UserHashedPassword                       string
	AccountCountry                           string
	Status                                   InvitationState
	ID                                       string
	AccountZipCode                           string
	UserServiceRole                          string
	UserUserAccountStatus                    string
	UserUserAccountStatusExplanation         string
	AccountState                             string
	AccountContactPhone                      string
	AccountCity                              string
	AccountWebhookHmacSecret                 string
	UserLastName                             string
	AccountAddressLine2                      string
	AccountAddressLine1                      string
	AccountTimeZone                          TimeZone
	AccountBelongsToUser                     string
	DestinationAccount                       string
	AccountPaymentProcessorCustomerID        string
	ToName                                   string
	Note                                     string
	ToEmail                                  string
	Token                                    string
	AccountSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken        sql.NullString
	UserAvatarSrc                            sql.NullString
	ToUser                                   sql.NullString
	AccountLatitude                          sql.NullString
	AccountLongitude                         sql.NullString
	FilteredCount                            int64
	TotalCount                               int64
	UserRequiresPasswordChange               bool
}

func (q *Queries) GetPendingInvitesForUser(ctx context.Context, db DBTX, arg *GetPendingInvitesForUserParams) ([]*GetPendingInvitesForUserRow, error) {
	rows, err := db.QueryContext(ctx, getPendingInvitesForUser,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ToUser,
		arg.Status,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetPendingInvitesForUserRow{}
	for rows.Next() {
		var i GetPendingInvitesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountName,
			&i.AccountBillingStatus,
			&i.AccountContactPhone,
			&i.AccountPaymentProcessorCustomerID,
			&i.AccountSubscriptionPlanID,
			&i.AccountBelongsToUser,
			&i.AccountTimeZone,
			&i.AccountAddressLine1,
			&i.AccountAddressLine2,
			&i.AccountCity,
			&i.AccountState,
			&i.AccountZipCode,
			&i.AccountCountry,
			&i.AccountLatitude,
			&i.AccountLongitude,
			&i.AccountLastPaymentProviderSyncOccurredAt,
			&i.AccountWebhookHmacSecret,
			&i.AccountCreatedAt,
			&i.AccountLastUpdatedAt,
			&i.AccountArchivedAt,
			&i.FromUser,
			&i.ToUser,
			&i.UserID,
			&i.UserUsername,
			&i.UserAvatarSrc,
			&i.UserEmailAddress,
			&i.UserHashedPassword,
			&i.UserPasswordLastChangedAt,
			&i.UserRequiresPasswordChange,
			&i.UserTwoFactorSecret,
			&i.UserTwoFactorSecretVerifiedAt,
			&i.UserServiceRole,
			&i.UserUserAccountStatus,
			&i.UserUserAccountStatusExplanation,
			&i.UserBirthday,
			&i.UserEmailAddressVerificationToken,
			&i.UserEmailAddressVerifiedAt,
			&i.UserFirstName,
			&i.UserLastName,
			&i.UserLastAcceptedTermsOfService,
			&i.UserLastAcceptedPrivacyPolicy,
			&i.UserLastIndexedAt,
			&i.UserCreatedAt,
			&i.UserLastUpdatedAt,
			&i.UserArchivedAt,
			&i.ToName,
			&i.Note,
			&i.ToEmail,
			&i.Token,
			&i.DestinationAccount,
			&i.ExpiresAt,
			&i.Status,
			&i.StatusNote,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingInvitesFromUser = `-- name: GetPendingInvitesFromUser :many

SELECT
	account_invitations.id,
	accounts.id as account_id,
	accounts.name as account_name,
	accounts.billing_status as account_billing_status,
	accounts.contact_phone as account_contact_phone,
	accounts.payment_processor_customer_id as account_payment_processor_customer_id,
	accounts.subscription_plan_id as account_subscription_plan_id,
	accounts.belongs_to_user as account_belongs_to_user,
	accounts.time_zone as account_time_zone,
	accounts.address_line_1 as account_address_line_1,
	accounts.address_line_2 as account_address_line_2,
	accounts.city as account_city,
	accounts.state as account_state,
	accounts.zip_code as account_zip_code,
	accounts.country as account_country,
	accounts.latitude as account_latitude,
	accounts.longitude as account_longitude,
	accounts.last_payment_provider_sync_occurred_at as account_last_payment_provider_sync_occurred_at,
	accounts.webhook_hmac_secret as account_webhook_hmac_secret,
	accounts.created_at as account_created_at,
	accounts.last_updated_at as account_last_updated_at,
	accounts.archived_at as account_archived_at,
	account_invitations.from_user,
	account_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	account_invitations.to_name,
	account_invitations.note,
	account_invitations.to_email,
	account_invitations.token,
	account_invitations.destination_account,
	account_invitations.expires_at,
	account_invitations.status,
	account_invitations.status_note,
	account_invitations.created_at,
	account_invitations.last_updated_at,
	account_invitations.archived_at,
	(
		SELECT COUNT(account_invitations.id)
		FROM account_invitations
		WHERE account_invitations.archived_at IS NULL
			AND account_invitations.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND account_invitations.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				account_invitations.last_updated_at IS NULL
				OR account_invitations.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				account_invitations.last_updated_at IS NULL
				OR account_invitations.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(account_invitations.id)
		FROM account_invitations
		WHERE account_invitations.archived_at IS NULL
	) AS total_count
FROM account_invitations
	JOIN accounts ON account_invitations.destination_account = accounts.id
	JOIN users ON account_invitations.from_user = users.id
WHERE account_invitations.archived_at IS NULL
	AND account_invitations.from_user = $5
	AND account_invitations.status = $6
	AND account_invitations.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND account_invitations.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		account_invitations.last_updated_at IS NULL
		OR account_invitations.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		account_invitations.last_updated_at IS NULL
		OR account_invitations.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $8
OFFSET $7
`

type GetPendingInvitesFromUserParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	FromUser      string
	Status        InvitationState
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetPendingInvitesFromUserRow struct {
	ExpiresAt                                time.Time
	AccountCreatedAt                         time.Time
	UserCreatedAt                            time.Time
	CreatedAt                                time.Time
	UserLastIndexedAt                        sql.NullTime
	UserEmailAddressVerifiedAt               sql.NullTime
	UserLastUpdatedAt                        sql.NullTime
	LastUpdatedAt                            sql.NullTime
	ArchivedAt                               sql.NullTime
	UserLastAcceptedPrivacyPolicy            sql.NullTime
	UserLastAcceptedTermsOfService           sql.NullTime
	UserArchivedAt                           sql.NullTime
	UserBirthday                             sql.NullTime
	UserTwoFactorSecretVerifiedAt            sql.NullTime
	UserPasswordLastChangedAt                sql.NullTime
	AccountArchivedAt                        sql.NullTime
	AccountLastUpdatedAt                     sql.NullTime
	AccountLastPaymentProviderSyncOccurredAt sql.NullTime
	UserTwoFactorSecret                      string
	UserFirstName                            string
	AccountID                                string
	AccountName                              string
	FromUser                                 string
	AccountBillingStatus                     string
	UserID                                   string
	UserUsername                             string
	StatusNote                               string
	UserEmailAddress                         string
	UserHashedPassword                       string
	AccountCountry                           string
	Status                                   InvitationState
	ID                                       string
	AccountZipCode                           string
	UserServiceRole                          string
	UserUserAccountStatus                    string
	UserUserAccountStatusExplanation         string
	AccountState                             string
	AccountContactPhone                      string
	AccountCity                              string
	AccountWebhookHmacSecret                 string
	UserLastName                             string
	AccountAddressLine2                      string
	AccountAddressLine1                      string
	AccountTimeZone                          TimeZone
	AccountBelongsToUser                     string
	DestinationAccount                       string
	AccountPaymentProcessorCustomerID        string
	ToName                                   string
	Note                                     string
	ToEmail                                  string
	Token                                    string
	AccountSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken        sql.NullString
	UserAvatarSrc                            sql.NullString
	ToUser                                   sql.NullString
	AccountLatitude                          sql.NullString
	AccountLongitude                         sql.NullString
	FilteredCount                            int64
	TotalCount                               int64
	UserRequiresPasswordChange               bool
}

func (q *Queries) GetPendingInvitesFromUser(ctx context.Context, db DBTX, arg *GetPendingInvitesFromUserParams) ([]*GetPendingInvitesFromUserRow, error) {
	rows, err := db.QueryContext(ctx, getPendingInvitesFromUser,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.FromUser,
		arg.Status,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetPendingInvitesFromUserRow{}
	for rows.Next() {
		var i GetPendingInvitesFromUserRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.AccountName,
			&i.AccountBillingStatus,
			&i.AccountContactPhone,
			&i.AccountPaymentProcessorCustomerID,
			&i.AccountSubscriptionPlanID,
			&i.AccountBelongsToUser,
			&i.AccountTimeZone,
			&i.AccountAddressLine1,
			&i.AccountAddressLine2,
			&i.AccountCity,
			&i.AccountState,
			&i.AccountZipCode,
			&i.AccountCountry,
			&i.AccountLatitude,
			&i.AccountLongitude,
			&i.AccountLastPaymentProviderSyncOccurredAt,
			&i.AccountWebhookHmacSecret,
			&i.AccountCreatedAt,
			&i.AccountLastUpdatedAt,
			&i.AccountArchivedAt,
			&i.FromUser,
			&i.ToUser,
			&i.UserID,
			&i.UserUsername,
			&i.UserAvatarSrc,
			&i.UserEmailAddress,
			&i.UserHashedPassword,
			&i.UserPasswordLastChangedAt,
			&i.UserRequiresPasswordChange,
			&i.UserTwoFactorSecret,
			&i.UserTwoFactorSecretVerifiedAt,
			&i.UserServiceRole,
			&i.UserUserAccountStatus,
			&i.UserUserAccountStatusExplanation,
			&i.UserBirthday,
			&i.UserEmailAddressVerificationToken,
			&i.UserEmailAddressVerifiedAt,
			&i.UserFirstName,
			&i.UserLastName,
			&i.UserLastAcceptedTermsOfService,
			&i.UserLastAcceptedPrivacyPolicy,
			&i.UserLastIndexedAt,
			&i.UserCreatedAt,
			&i.UserLastUpdatedAt,
			&i.UserArchivedAt,
			&i.ToName,
			&i.Note,
			&i.ToEmail,
			&i.Token,
			&i.DestinationAccount,
			&i.ExpiresAt,
			&i.Status,
			&i.StatusNote,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setAccountInvitationStatus = `-- name: SetAccountInvitationStatus :exec

UPDATE account_invitations SET
	status = $1,
	status_note = $2,
	last_updated_at = NOW(),
	archived_at = NOW()
WHERE archived_at IS NULL
	AND id = $3
`

type SetAccountInvitationStatusParams struct {
	Status     InvitationState
	StatusNote string
	ID         string
}

func (q *Queries) SetAccountInvitationStatus(ctx context.Context, db DBTX, arg *SetAccountInvitationStatusParams) error {
	_, err := db.ExecContext(ctx, setAccountInvitationStatus, arg.Status, arg.StatusNote, arg.ID)
	return err
}
