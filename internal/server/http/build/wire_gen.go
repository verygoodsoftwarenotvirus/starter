// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package build

import (
	"context"
	config7 "github.com/verygoodsoftwarenotvirus/starter/internal/analytics/config"
	"github.com/verygoodsoftwarenotvirus/starter/internal/authentication"
	"github.com/verygoodsoftwarenotvirus/starter/internal/config"
	"github.com/verygoodsoftwarenotvirus/starter/internal/database"
	config4 "github.com/verygoodsoftwarenotvirus/starter/internal/database/config"
	"github.com/verygoodsoftwarenotvirus/starter/internal/database/postgres"
	config8 "github.com/verygoodsoftwarenotvirus/starter/internal/email/config"
	"github.com/verygoodsoftwarenotvirus/starter/internal/encoding"
	config6 "github.com/verygoodsoftwarenotvirus/starter/internal/featureflags/config"
	config5 "github.com/verygoodsoftwarenotvirus/starter/internal/messagequeue/config"
	config2 "github.com/verygoodsoftwarenotvirus/starter/internal/observability/logging/config"
	"github.com/verygoodsoftwarenotvirus/starter/internal/observability/tracing"
	config3 "github.com/verygoodsoftwarenotvirus/starter/internal/observability/tracing/config"
	"github.com/verygoodsoftwarenotvirus/starter/internal/pkg/random"
	"github.com/verygoodsoftwarenotvirus/starter/internal/routing/chi"
	"github.com/verygoodsoftwarenotvirus/starter/internal/server/http"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/accountinvitations"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/accounts"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/admin"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/auditlogentries"
	authentication2 "github.com/verygoodsoftwarenotvirus/starter/internal/services/authentication"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/oauth2clients"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/servicesettingconfigurations"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/servicesettings"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/usernotifications"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/users"
	"github.com/verygoodsoftwarenotvirus/starter/internal/services/webhooks"
	"github.com/verygoodsoftwarenotvirus/starter/internal/uploads/images"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.InstanceConfig) (http.Server, error) {
	httpConfig := cfg.Server
	observabilityConfig := &cfg.Observability
	configConfig := &observabilityConfig.Logging
	logger := config2.ProvideLogger(configConfig)
	config9 := &observabilityConfig.Tracing
	tracerProvider, err := config3.ProvideTracerProvider(ctx, config9, logger)
	if err != nil {
		return nil, err
	}
	config10 := &cfg.Database
	dataManager, err := postgres.ProvideDatabaseClient(ctx, logger, tracerProvider, config10)
	if err != nil {
		return nil, err
	}
	encodingConfig := cfg.Encoding
	contentType := encoding.ProvideContentType(encodingConfig)
	serverEncoderDecoder := encoding.ProvideServerEncoderDecoder(logger, tracerProvider, contentType)
	routingConfig := &cfg.Routing
	router := chi.NewRouter(logger, tracerProvider, routingConfig)
	servicesConfig := &cfg.Services
	authenticationConfig := &servicesConfig.Auth
	authenticator := authentication.ProvideArgon2Authenticator(logger, tracerProvider)
	accountUserMembershipDataManager := database.ProvideAccountUserMembershipDataManager(dataManager)
	cookieConfig := &authenticationConfig.Cookies
	sessionManager, err := config4.ProvideSessionManager(cookieConfig, dataManager)
	if err != nil {
		return nil, err
	}
	config11 := &cfg.Events
	publisherProvider, err := config5.ProvidePublisherProvider(ctx, logger, tracerProvider, config11)
	if err != nil {
		return nil, err
	}
	generator := random.NewGenerator(logger, tracerProvider)
	config12 := &cfg.FeatureFlags
	client := tracing.BuildTracedHTTPClient()
	featureFlagManager, err := config6.ProvideFeatureFlagManager(config12, logger, tracerProvider, client)
	if err != nil {
		return nil, err
	}
	config13 := &cfg.Analytics
	eventReporter, err := config7.ProvideEventReporter(config13, logger, tracerProvider)
	if err != nil {
		return nil, err
	}
	routeParamManager := chi.NewRouteParamManager()
	authService, err := authentication2.ProvideService(ctx, logger, authenticationConfig, authenticator, dataManager, accountUserMembershipDataManager, sessionManager, serverEncoderDecoder, tracerProvider, publisherProvider, generator, featureFlagManager, eventReporter, routeParamManager)
	if err != nil {
		return nil, err
	}
	usersConfig := &servicesConfig.Users
	userDataManager := database.ProvideUserDataManager(dataManager)
	accountDataManager := database.ProvideAccountDataManager(dataManager)
	accountInvitationDataManager := database.ProvideAccountInvitationDataManager(dataManager)
	mediaUploadProcessor := images.NewImageUploadProcessor(logger, tracerProvider)
	passwordResetTokenDataManager := database.ProvidePasswordResetTokenDataManager(dataManager)
	userDataService, err := users.ProvideUsersService(ctx, usersConfig, authenticationConfig, logger, userDataManager, accountDataManager, accountInvitationDataManager, accountUserMembershipDataManager, authenticator, serverEncoderDecoder, mediaUploadProcessor, routeParamManager, tracerProvider, publisherProvider, generator, passwordResetTokenDataManager, featureFlagManager, eventReporter)
	if err != nil {
		return nil, err
	}
	accountsConfig := servicesConfig.Accounts
	accountDataService, err := accounts.ProvideService(logger, accountsConfig, accountDataManager, accountInvitationDataManager, accountUserMembershipDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, generator)
	if err != nil {
		return nil, err
	}
	accountinvitationsConfig := &servicesConfig.AccountInvitations
	config14 := &cfg.Email
	emailer, err := config8.ProvideEmailer(config14, logger, tracerProvider, client)
	if err != nil {
		return nil, err
	}
	accountInvitationDataService, err := accountinvitations.ProvideAccountInvitationsService(logger, accountinvitationsConfig, userDataManager, accountInvitationDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, emailer, generator)
	if err != nil {
		return nil, err
	}
	webhooksConfig := &servicesConfig.Webhooks
	webhookDataManager := database.ProvideWebhookDataManager(dataManager)
	webhookDataService, err := webhooks.ProvideWebhooksService(logger, webhooksConfig, webhookDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider)
	if err != nil {
		return nil, err
	}
	adminUserDataManager := database.ProvideAdminUserDataManager(dataManager)
	adminService := admin.ProvideService(logger, authenticationConfig, authenticator, adminUserDataManager, sessionManager, serverEncoderDecoder, routeParamManager, tracerProvider)
	servicesettingsConfig := &servicesConfig.ServiceSettings
	serviceSettingDataManager := database.ProvideServiceSettingDataManager(dataManager)
	serviceSettingDataService, err := servicesettings.ProvideService(logger, servicesettingsConfig, serviceSettingDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider)
	if err != nil {
		return nil, err
	}
	servicesettingconfigurationsConfig := &servicesConfig.ServiceSettingConfigurations
	serviceSettingConfigurationDataManager := database.ProvideServiceSettingConfigurationDataManager(dataManager)
	serviceSettingConfigurationDataService, err := servicesettingconfigurations.ProvideService(logger, servicesettingconfigurationsConfig, serviceSettingConfigurationDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider)
	if err != nil {
		return nil, err
	}
	oAuth2ClientDataManager := database.ProvideOAuth2ClientDataManager(dataManager)
	oauth2clientsConfig := oauth2clients.ProvideConfig(authenticationConfig)
	oAuth2ClientDataService, err := oauth2clients.ProvideOAuth2ClientsService(logger, oAuth2ClientDataManager, userDataManager, authenticator, serverEncoderDecoder, routeParamManager, oauth2clientsConfig, tracerProvider, generator, publisherProvider)
	if err != nil {
		return nil, err
	}
	usernotificationsConfig := &servicesConfig.UserNotifications
	userNotificationDataManager := database.ProvideUserNotificationDataManager(dataManager)
	userNotificationDataService, err := usernotifications.ProvideService(ctx, logger, usernotificationsConfig, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, userNotificationDataManager)
	if err != nil {
		return nil, err
	}
	auditlogentriesConfig := &servicesConfig.AuditLogEntries
	auditLogEntryDataManager := database.ProvideAuditLogEntryDataManager(dataManager)
	auditLogEntryDataService, err := auditlogentries.ProvideService(ctx, logger, auditlogentriesConfig, auditLogEntryDataManager, serverEncoderDecoder, routeParamManager, tracerProvider)
	if err != nil {
		return nil, err
	}
	server, err := http.ProvideHTTPServer(ctx, httpConfig, dataManager, logger, serverEncoderDecoder, router, tracerProvider, authService, userDataService, accountDataService, accountInvitationDataService, webhookDataService, adminService, serviceSettingDataService, serviceSettingConfigurationDataService, oAuth2ClientDataService, userNotificationDataService, auditLogEntryDataService)
	if err != nil {
		return nil, err
	}
	return server, nil
}
